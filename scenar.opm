% This is macro package desinged for OpTeX, see http://petr.olsak.net/optex
% scenar.opm, Filip Spelina, 2023

\_def\_scenar_version{1.0, 2023-06-19}
\_codedecl \beginscenar {Painless screeplay formatting <\_scenar_version>}
\_namespace{scenar}

    \_doc
        \`\beginscenar` sets up and formats the document in the recommended way. 
        These settings may be overriden. \~`\repindent` holds distance of dialogue from character name.
    \_cod

\_def\.beginscenar{
    \_initunifonts               
    \_cslang                            % české vzory dělení slov
    \_fontfam[source pro]
    \_margins/1 a4 (2.5,2.5,2.5,2.5)cm  % okraje 2.5 cm, strana A4
    \_typosize[12/20]
    \_parindent=0pt
    \_parskip\_smallskipamount
    
    \_scenar_repindent=3.5cm
    }

\_nspublic \beginscenar ;

    \_doc
        Helper \`\toupper``{<text>}` converts `text` to uppercase. Uses lua to make
        itself expandable. Unlike `\uppercase`. 
    \_cod

\_def\.toupper#1{%
    \_directlua{%
        tex.print(unicode.utf8.upper("\_luaescapestring{\_unexpanded{#1}}") )%
    }%
}

    \_doc
        \`\pop` prints description of events in cursive. If used outside of \~`\rep` reads text till the end of paragraph.
        Redefined behavior in `\rep` later. 
    \_cod

\_def\.pop#1\_par{%
    \_par\_abovetitle{\_penalty-151}\_smallskip%
    {\_it #1\_par}%
    \_smallskip%
    }

\_nspublic \pop ;

    \_doc
        \`\rep``<character name>:<text>` for printing dialogue. Reads everything till the end of paragraph. 
        Redefines \~`\pop` behaviour to wrap event description as `(text)`. Furthermore saves character name for printing character list.
        This uses inserting into \OpTeX index with `\iitype {h}` for hiding location page number. See \~`\characterpage`

        \`\repindent` holds distance of character name from dialogue. If the character names are longer than +- 14 characters you may need to increse this.
    \_cod

\_newdimen\_scenar_repindent

\_def\.rep#1:#2\_par{{\_def\pop##1{{\_it(##1)}}%
                        \_nsprivate \pop ;
                    \_iitype{h}\_iindex{\.toupper{#1}} % save to character list
                    \_par\_leavevmode\_hbox to \_the\.repindent {\.toupper{#1}\_hfil}%
                    \_hangindent=\_the\.repindent\_hangafter=1%
                    #2\_par}}

\_nspublic \rep \repindent ;

    \_doc
        \`\act``<act name>` starts new act with with act names which is read till the end of line. Act name is optional.
        Implementation uses \OpTeX `\chap` with several adjustments. We redefine following: 
        `\_chapfont` `\_chapx` `\_printchap` and `\_mtext` definition for chapter header in English and Czech.
        Support for more languages can be easily added, see 
        \ulink[http://petr.olsak.net/ftp/olsak/optex/optex-doc.pdf]{\OpTeX/ documentation}.
    \_cod

\_eoldef\.act#1{%
    \_inchap{#1}%
}

% Redefinition of Kapitola to Destvi
\_sdef{_mt:chap:cs}{Dějství}
\_sdef{_mt:chap:en}{Act}

% redefinition of Headers fonts - removed \_boldify
\_def \_chapfont {\_scalemain\_typoscale[\_magstep3/\_magstep3]}

% redefinition of chapX - we do not reset scene counters in new acts
\_def \_chapx {\_secx\_lfnotenum=0}

% redefinition of \printchap - smaller belowtitle skip; removed upper glue 
\_def\_printchap #1{\_vfill\_supereject \_prevdepth=0pt
        % !!OFF \_topglue\_medskipamount % shifted by topkip+\medskipamount
    {\_chapfont \_noindent \_mtext{chap} \_printrefnum[@]\_par
    \_nobreak\_smallskip
    \_noindent \_raggedright #1\_nbpar}\_mark{}%
    \_nobreak \_belowtitle{\_smallskip}%
}

\_nspublic \act ;

    \_doc
        \`\scene``<scene name>` starts new act with with act names which is read till the end of line. Scene name is optional.
        Implementation uses \OpTeX `\sec` with several adjustments. We redefine following: 
        `\_secfont` `\_thesecnum` `\_printsec`. We add new `\_mtext{scene}` values for printing scene header in English and Czech.
        Support for more languages can be easily added, see 
        \ulink[http://petr.olsak.net/ftp/olsak/optex/optex-doc.pdf]{\OpTeX/ documentation}.
    \_cod

% definiton of \scene - converts to \sec
\_eoldef\.scene#1{%
    \_insec{#1}%
} 

% Definition of Scene text in different languages
\_sdef{_mt:scene:cs}{Scéna}
\_sdef{_mt:scene:en}{Scene}

% redefinition of Headers fonts - removed \_boldify
\_def \_secfont {\_scalemain\_typoscale[\_magstep2/\_magstep2]}

% redefinition of _thesecnum / We dont want to print act number
\_def \_thesecnum {\_the\_secnum}

% redefinition of sec printing - Includes 'scena'
% In print ref num checks whether #1 is empty, if not prints  --- and #1
% \isempty does not work here ?
\_def\_printsec#1{\_par
    \_abovetitle{\_penalty-400}{\_bigskip}
    {\_secfont \_noindent \_raggedright 
    \_printrefnum[\_mtext{scene} @\_if\_relax#1\_relax\_else\_enskip---\_enskip\_fi]%
    #1\_nbpar}\_insertmark{#1}%
    \_nobreak\_belowtitle{\_medskip}%
    \_firstnoindent
}

\_nspublic \scene ;

    \_doc   
        \`\titlepage` prints an title page with before specified parameters. `source pro` font family is hardcoded here
        to avoid undefined command sequence: `\light\rm`. 
        All in all using `\titlepage` when file format is changed is not adviced without editing macros below as well.
        \`\title``{text}` saves screenplay title. This is the only mandatory parameter. Similarly you can specify following: 
        \`\subtitle``{text}`, \`\author``{text}`, \`\basedon``{text}` and \`\date``{text}`.
    \_cod

\_def\.title#1{ \_def\.savedtitle{#1} }
\_def\.subtitle#1{ \_def\.savedsubtitle{#1} }
\_def\.author#1{ \_def\.savedauthor{#1} }
\_def\.basedon#1{ \_def\.savedbasedon{#1} }
\_def\.date#1{ \_def\.saveddate{#1} }

\_def\.titlefont{\light\rm\_scalemain\_typoscale[\_magstep4/\_magstep4]}
\_def\.subtitlefont{\light\rm\_scalemain\_typoscale[\_magstep2/\_magstep2]}
\_def\.titletextfont{\light\rm\_scalemain\_typoscale[\_magstep1/\_magstep1]}

\_sdef{_mt:author:cs}{Autor}
\_sdef{_mt:author:en}{Written by}

\_sdef{_mt:basedon:cs}{Dle předlohy}
\_sdef{_mt:basedon:en}{Based on}

\_def\.titlepage{\_nopagenumbers
    {
    \_fontfam[source pro]
    \.titletextfont
    \_vfill\_break
    \_vglue4.5cm
    \_centerline{\.titlefont \.savedtitle \_unskip}\_par
    \_ifx\.savedsubtitle\_undefined
        \_else \_vglue1cm\_centerline{\.subtitlefont \.savedsubtitle \_unskip}\_par
        \_fi
    \_ifx\.savedauthor\_undefined
        \_else \_vglue2cm\_centerline{\_mtext{author}\_unskip}\_par
        \_centerline{\.savedauthor\_unskip}\_par
        \_fi
    \_ifx\.savedbasedon\_undefined
        \_else \_vglue2cm\_centerline{\_mtext{basedon}\_unskip}\_par
        \_centerline{\.savedbasedon\_unskip}\_par
        \_fi
    \_ifx\.saveddate\_undefined
        \_else \_vglue3cm{\_hfill \.titletextfont \.saveddate \_par}
        \_fi
    }
    \_vfill\_break\_footline={\_hss\_tenrm\_folio\_hss}
}

\_nspublic \title \subtitle \author \basedon \date \titlepage ;

    \_doc   
        \`\contentpage` prints new page with screenplay content. \OpTeX `\maketoc` is utilized here with
        adjustments for screenplay. In act and scene numbering we now include language dependent description for scenes and acts.
        As this breaks page layout whole ToC is also moved 1.2cm to the right. 
        Page header is language dependent and can be easily edited or new languge definition might be added.
    \_cod

\_def\.contentpage{
    {
        \_vfill\_break
        \_def \_secfont {\_scalemain\_typoscale[\_magstep3/\_magstep3]} %big font
        \_notoc\_nonum\_insec{\_mtext{toc}}
        \_maketoc
    }
}

% Table of content settings
\_sdef{_mt:toc:cs}{Obsah}
\_sdef{_mt:toc:en}{Contents}

% Redefines toc levels to include 'scene' and 'act'
\_sdef{_tocl:1}#1#2#3{\_nofirst\_bigskip
    \_bf\_llaptoclink{\_mtext{chap} #1}{#2}\_nobreak\_hfill \_pgn{#3}\_tocpar}
\_sdef{_tocl:2}#1#2#3{\_llaptoclink{\_mtext{scene} #1}{#2}\_tocdotfill\_pgn{#3}\_tocpar}

% Moved left side with kern 1.2cm to keep act and scenes in page layout
\_def\_llaptoclink#1{\_noindent\_kern1.2cm%
    \_llap{\_ilink[toc:\_the\_tocrefnum]{\_enspace\_numprint{#1}\_kern.4em}\_kern.1em}}

\_nspublic \contentpage ;

    \_doc   
        \`\characterpage` prints new page with all characters in screenplay automaticly. \OpTeX `\makeindex` is utilized here.
        Page header and description is language dependent and can be easily edited or new languge definition might be added.
    \_cod

\_sdef{_mt:charlist:cs}{Postavy}
\_sdef{_mt:charlist:en}{Characters}

\_sdef{_mt:charlistdesc:cs}{Seznam všech postav díla se svou vlastní replikou. 
                            Postavy jsou vytištěné v abecedním pořadí.\_bigskip}
\_sdef{_mt:charlistdesc:en}{List of characters, alphabeticly sorted.\_bigskip}

\_def\.characterpage{
    {
        \_vfill\_break % New page
        \_def \_secfont {\_scalemain\_typoscale[\_magstep3/\_magstep3]} %bigfont
        \_notoc\_nonum\_insec{\_mtext{charlist}} % Page title
        \_mtext{charlistdesc} % Short description
        \_begmulti 2 % Two colums
            \_makeindex
        \_endmulti
    }
}

\_nspublic \characterpage ;

    \_doc
        Redefinition of \OpTeX macros for Index. To be precise: `\_printpages` `\_usepgcomma` `\_usepgdash` and `\_pgprint`. 
        Here we add new index type `h` which does not show origin page. 
    \_cod

% redefintes pageprinting so usepgcomma, and usepgdash receive pgtype
\_def\_printpages#1:#2,{% state automaton for compriming pages
    \_ifx,#1,\_uselastpgnum
    \_else \_def\_tmpa{#2}%
        \_ifx\_pgtype\_tmpa \_else
            \_let\_pgtype=\_tmpa
            \_uselastpgnum \_usepgcomma{#2} \_pgprint#1:{#2}%
            \_tmpnum=#1 \_returnfi \_fi
        \_ifnum\_tmpnum=#1 \_returnfi \_fi
        \_advance\_tmpnum by1
        \_ifnum\_tmpnum=#1  \_ifx\_lastpgnum\_undefined \_usepgdash{#2}\_fi
                            \_edef\_lastpgnum{\_the\_tmpnum:{\_pgtype}}%
                            \_returnfi \_fi
        \_uselastpgnum \_usepgcomma{#2} \_pgprint#1:{#2}%
        \_tmpnum=#1
        \_relax
    \_ea\_printpages \_fi
}

% Disables printing if type is h
% comma+space between page numbers
\_def\_usepgcomma#1{\_ifx h#1\_relax\_else\_ifnum\_tmpnum>0, \_fi\_fi} 
% dash in the <from>--<to> form
\_def\_usepgdash#1{\_ifx h#1\_relax\_else\_hbox{--}\_fi} 

% Disables page printing when type is h
\_def\_pgprint #1:#2{%
    \_ifx ,#2,\_pgprintA{#1}\_returnfi \_fi
    \_ifx b#2{\_bf \_pgprintA{#1}}\_returnfi \_fi
    \_ifx i#2{\_it \_pgprintA{#1}}\_returnfi \_fi
    \_ifx u#2\_pgu{\_pgprintA{#1}}\_returnfi \_fi
    \_ifx h#2{\_relax}\_returnfi \_fi
    \_pgprintA{#1}\_relax
}

\_endnamespace
\_endcode

\sec About `scenar` package

This package provides several macros for easier screenplay formatting. During the development, I discovered that no 
strict standard for theatre screenplay formatting exists. This is not necessarily the case for screenplays used in the filming industry.
However, during a film shooting several types of specialized screenplays are made and that is just out of the scope of this work.

I have heard from several sources that formatting theatre screenplay is really up to the discretion of its author. This means that 
I had to make some design decisions myself that may not be appreciated by everyone. Still, I tried to follow the most
unspoken rules and implemented the most common features that the script usually utilizes. 

My main goal has always been to design a format that could be comfortably used on stage. I have done this from position of 
occasional amateur actor. I have discussed my work with both current and former student of dramaturgy.

\sec Making a screenplay

\secc Document setup

First of all you need to include this package with `\load[scenar]`. Afterwards you should use \^`\beginscenar` which sets 
the document format in the reccomended way. That is A4 paper with 2.5cm borders and source pro font family. Implicit 
screenplay language is Czech. You may use `\enlang` for switching to English which is also implemented. 

Interesting non\TeX/ standard document setting is \^`\repindent``<dimension>` that changes the distance of character names from
their dialogue. Currently the maximum charactar name size is around 15 characters. You can safely use this register if necessary.
`\parskip` register is also utilized for slight spacing between different character lines. This is up to personal preference and
might be changed. 

\secc Title, content and character pages

Now our document is finally ready. Usually the script will start with three special pages.

\^`\titlepage` prints, as the name suggest, title page of script. However, before using this command you have to specify some parameters.
\begitems\style I
* \^`\title``{<text>}` sets the name of the sript. This is the only mandatory parameter and has to be defined before \~`\titlepage`. 
* \^`\subtitle``{<text>}` provides an option to specify subtitle
* \^`\author``{<text>}` prints written by `<text>`. If you want to specify more authors please include them all in a single line.
* \^`\basedon``{<text>}` prints based on `<text>`.
* \^`\date``{<text>}` prints `<text>` to the left side. Specifying month and day is recommended. 
\enditems

\bigskip

\^`\characterpage` provides a page with automaticly generated list of characters.
Any `<character>` in \~`\rep``<character>` is displayed here. 

\bigskip

\^`\contentpage` prepares Table of Contents page with all acts and scenes listed.

\secc Acts and scenes

\^`\act``<text>` starts a new act. `<text>` is optional. Act always starts a new page and is usually followed by a short description
of events in this act. Acts show in table of content.

\bigskip

\^`\scene``<text>` starts a new scene. Scenes are numbered from 1 regardles of acts. `<text>` is optional. 
Scenes show in table of content as well.

\secc Dialogue and event description

\^`\rep``<character>``:``<text>` is a macro used for printing dialogue and probably the most important macro here. Following
\~`\rep` everything you write till `:` is considered a character name and is placed on the left side. The `<text>` which lasts till the
end of paragraph (You must make a double enter to end this.) is then placed into the column which starts at a \^`\repindent` distance from 
left side of the page.

\bigskip

\^`\pop``<text>` meanwhile is used for printing event description and its behavior is dependent on context. When an event is not tied 
to a specific character then \~`\pop` should be used in a new paragraph and reads `<text>` till the end of an paragraph. Text is then 
printed in cursive.

However, if \~`\pop``{<text>}` is used in \~`\rep` then text should be enclosed in `{}` parentheses. `<text>` keeps itself as part of the 
dialogue column but is printed in cursive and enclosed in (). You should use this option to describe events tied to a specific character.

\sec Regarding \OpTeX macros usage

As later described in the implementation section, this package does not use \OpTeX in a read-only manner. Even some private parts and macros are 
redefined and adjusted here. After all that is the reason why the sections of this documentation are labelled `scenes` even though 
the usual `\sec` is used. I'd like to comment on why have I decided to do so in a broad manner. The exact changes are documented in \ref[impl].

To start, I find screenplay formatting a rather specific work and the work of this package is a document-type style implementation rather
than a feature package. I find it highly unlikely anyone would find a use for this code outside of the screenplay formatting it is intended for.
Therefore chances someone would find my modifications disruptive and hostile for his purposes are low.

First I redefined several declarations used in `\sec` and `\chap`. Acts and scenes are implemented basically as a wrapper for these 
\OpTeX headers. Considering how similar they were to my envisioned acts and scenes I found a way of redesigning them instead of making 
completely new headers much simpler and more useful. `\sec` and `\chap` come with built-in support for ToC and references. And already
almost had a design I needed. So all changes here are pretty much graphical.

The next changed routine is generating a Table of content. Changes here are likewise mostly graphical.

The most controversial part in my eyes is the change to routine regarding the index. While the purpose of previous adjustments remained the same with
simply different execution. Here I have forced `\makeindex` to make a list of characters instead of an index it is meant to create.
I am not necessarily happy with this level of twisting the original purpose, however, the benefits were simply too nice to pass up.
The index automatically catalogues all entries and works as a mathematical set. All same entries are grouped together and even sorted.
Brilliant qualities that I needed to use.

Still, I believe I managed to make these adjustments maximally nondestructive. Instead of cutting the code completely, I introduced
a new index type for hiding origin page numbers which is the difference between the original index and the list I needed. Thanks to that 
classic indexation should still be possible as demonstrated at the end of this documentation.   

\sec Printing documentation

I have tried to follow \OpTeX documentation and package practices. Meaning this documentation has been and can be generated 
with the following console command.

\bigskip

`optex -jobname scenar-doc '\docgen scenar`

\bigskip

You should run this command three times in order to properly generate Table of Contents and Index. 

Beware `\docgen` is first included in TeXlive 2023. If you encounter problems please ensure you have last \OpTeX/ version.

\sec List of possible updates

\begitems\style -
* Printing act numbers in roman numerals
* Using `\_isempty` `\_isdefined` macros from \OpTeX/. I could not make them work.
* Title page is hardcoded with Source pro font and with A4 format in mind. More flexible approach would be welcome.
* Character page is implemented with automatic printing. Some helper macros for formatting character page manually 
  with possibly character descriptions. 
* Off switch for collecting character names to index.
\enditems

\sec Credits and used resources

My thanks goes to Zuzana Novotná and Kristina Kalendová who discussed this work with me and 
pointed me the right way. 

\ulink[https://www.wlyceum.cz/web/soubory/eichlerova.pdf]{Jak napsat filmový scénář. Eichlerová Barbora 2013}

\ulink[http://www.scenar.cz/]{Scenar.cz}

\ulink[http://petr.olsak.net/ftp/olsak/optex/optex-doc.pdf]{\OpTeX/ documantation}

\ulink[https://petr.olsak.net/ftp/olsak/optex/math-doc.pdf]{Documentation of math.opm}

\ulink[http://petr.olsak.net/tpp.html]{\TeX/ pro pragmatiky}

\ulink[http://petr.olsak.net/tbn.html]{\TeX/book naruby}

    \_doc
        \load [doc,scenar]

        \tit Painless screenplay formatting\fnotemark1
        \fnotetext{Available at \url{https://github.com/BasileosFelices/optex-scenar}}
        \hfill Version: \_scenar_version \par
        \centerline{semestrální práce BI-\TeX/ LS 2022/2023}
        \centerline{\it Filip Špelina, 2023}

        \notoc\nonum\sec Table of contents
        \maketoc
        \printdoctail scenar.opm % prints the documantation written after \_endcode
        \sec[impl] Implementation
        \printdoc scenar.opm % print code + local documentation
        \sec Index
        \begmulti 3
            \tt \makeindex     
        \endmulti
        \bye
    \_cod


\endinput
\bye